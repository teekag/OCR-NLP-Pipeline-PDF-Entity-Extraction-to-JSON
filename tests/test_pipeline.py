#!/usr/bin/env python3
"""
Unit tests for the OCR-NLP Pipeline components.
"""

import os
import sys
import json
import unittest
from pathlib import Path
from unittest.mock import patch, MagicMock

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import pipeline modules
from src.pipeline import PipelineBuilder
from src.ocr import OCREngine
from src.text_processing import TextPreprocessor
from src.entity_extraction import EntityExtractor


class TestPipelineBuilder(unittest.TestCase):
    """Test the PipelineBuilder class."""

    def test_pipeline_builder_initialization(self):
        """Test that the PipelineBuilder initializes with default values."""
        builder = PipelineBuilder()
        self.assertIsNotNone(builder)
        
    def test_pipeline_builder_with_ocr_engine(self):
        """Test that the PipelineBuilder can be configured with an OCR engine."""
        builder = PipelineBuilder()
        new_builder = builder.with_ocr_engine('tesseract', lang='eng')
        self.assertEqual(new_builder, builder)  # Should return self for chaining
        
    def test_pipeline_builder_build(self):
        """Test that the PipelineBuilder builds a Pipeline object."""
        builder = PipelineBuilder()
        pipeline = builder.build()
        self.assertIsNotNone(pipeline)


class TestTextPreprocessor(unittest.TestCase):
    """Test the TextPreprocessor class."""
    
    def setUp(self):
        """Set up test fixtures."""
        self.preprocessor = TextPreprocessor()
        
    def test_normalize_text(self):
        """Test text normalization."""
        # Test with various inputs
        test_cases = [
            ("Hello  World!", "Hello World!"),  # Extra spaces
            ("Line1\nLine2", "Line1 Line2"),    # Newlines
            ("$100.00", "$100.00"),             # Currency
            ("01/01/2023", "01/01/2023"),       # Dates
            ("", "")                            # Empty string
        ]
        
        for input_text, expected_output in test_cases:
            with self.subTest(input_text=input_text):
                result = self.preprocessor.normalize_text(input_text)
                self.assertEqual(result, expected_output)


class TestEntityExtraction(unittest.TestCase):
    """Test the EntityExtractor class."""
    
    @patch('src.entity_extraction.EntityExtractor')
    def test_extract_entities(self, mock_extractor):
        """Test entity extraction with mocked extractor."""
        # Mock the extract_entities method
        mock_instance = mock_extractor.return_value
        mock_instance.extract_entities.return_value = [
            {"text": "John Doe", "type": "PERSON", "confidence": 0.95},
            {"text": "123 Main St", "type": "ADDRESS", "confidence": 0.85},
            {"text": "01/01/2023", "type": "DATE", "confidence": 0.90}
        ]
        
        # Create a sample text
        sample_text = "Invoice from John Doe at 123 Main St dated 01/01/2023"
        
        # Extract entities
        entities = mock_instance.extract_entities(sample_text)
        
        # Verify results
        self.assertEqual(len(entities), 3)
        self.assertEqual(entities[0]["type"], "PERSON")
        self.assertEqual(entities[1]["type"], "ADDRESS")
        self.assertEqual(entities[2]["type"], "DATE")


class TestSampleOutputs(unittest.TestCase):
    """Test the sample outputs generated by the pipeline."""
    
    def test_sample_output_format(self):
        """Test that sample outputs have the expected format."""
        # Path to sample outputs
        sample_outputs_dir = Path('../data/sample_outputs')
        
        # Skip test if directory doesn't exist
        if not sample_outputs_dir.exists():
            self.skipTest("Sample outputs directory not found")
        
        # Get all JSON files in the directory
        json_files = list(sample_outputs_dir.glob('*.json'))
        
        # Skip test if no JSON files found
        if not json_files:
            self.skipTest("No sample output JSON files found")
        
        # Check each JSON file
        for json_file in json_files:
            with self.subTest(file=json_file.name):
                # Load JSON file
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # Check required fields
                self.assertIn('document', data)
                self.assertIn('ocr', data)
                self.assertIn('entities', data)
                
                # Check document field
                self.assertIn('filename', data['document'])
                self.assertIn('pages', data['document'])
                
                # Check OCR field
                self.assertIn('text', data['ocr'])
                
                # Check entities field
                self.assertIsInstance(data['entities'], list)
                
                # Check entity format if entities exist
                if data['entities']:
                    entity = data['entities'][0]
                    self.assertIn('text', entity)
                    self.assertIn('type', entity)
                    self.assertIn('confidence', entity)


if __name__ == '__main__':
    unittest.main()
